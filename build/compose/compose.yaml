name: storage_project
services:
  # Kafka
  kafka:
    build:
      context: ../dockerfile/kafka
      dockerfile: ./Dockerfile
    container_name: kafka
    ports:
      - ${KAFKA_EXTERNAL_PORT}:9092
    networks:
      - storage_project
    healthcheck:
      test:
        ["CMD-SHELL", "./wait-for.sh kafka:${KAFKA_PORT} -- ./kafka_setup.sh"]
      interval: 10s
      timeout: 10s
      retries: 100
      start_period: 10s

  # Services

  # api
  api:
    build:
      context: ../../
      dockerfile: ./build/dockerfile/api/Dockerfile
    container_name: api
    networks:
      - storage_project
    environment:
      - API_PORT=${API_PORT}
      - USER_GRPC_PORT=${USER_GRPC_PORT}
      - USER_GRPC_HOST=${USER_GRPC_HOST}
      - STORAGE_GRPC_PORT=${STORAGE_GRPC_PORT}
      - STORAGE_GRPC_HOST=${STORAGE_GRPC_HOST}
      - GRAFANA_LOKI_HOST=${GRAFANA_LOKI_HOST}
      - GRAFANA_LOKI_PORT=${GRAFANA_LOKI_PORT}
      - PROMETHEUS_PORT=${PROMETHEUS_PORT}
      - ZIPKIN_HOST=${ZIPKIN_HOST}
      - ZIPKIN_PORT=${ZIPKIN_PORT}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
    ports:
      - "${API_PORT}:${API_PORT}"
    command: ["./app"]
    depends_on:
      kafka:
        condition: service_healthy

  # Notification Service
  notification:
    build:
      context: ../../
      dockerfile: ./build/dockerfile/notification/Dockerfile
    container_name: notification
    networks:
      - storage_project
    environment:
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_LOGIN=${SMTP_LOGIN}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
      - GRAFANA_LOKI_HOST=${GRAFANA_LOKI_HOST}
      - GRAFANA_LOKI_PORT=${GRAFANA_LOKI_PORT}
      - ZIPKIN_HOST=${ZIPKIN_HOST}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
    command: ["./app"]
    depends_on:
      kafka:
        condition: service_healthy

  #User Service
  user:
    build:
      context: ../../
      dockerfile: ./build/dockerfile/user/Dockerfile
    container_name: user
    networks:
      - storage_project
    environment:
      - USER_GRPC_PORT=${USER_GRPC_PORT}
      - USER_GRPC_HOST=${USER_GRPC_HOST}
      - STORAGE_GRPC_PORT=${STORAGE_GRPC_PORT}
      - STORAGE_GRPC_HOST=${STORAGE_GRPC_HOST}
      - GRAFANA_LOKI_HOST=${GRAFANA_LOKI_HOST}
      - GRAFANA_LOKI_PORT=${GRAFANA_LOKI_PORT}
      - PROMETHEUS_PORT=${PROMETHEUS_PORT}
      - ZIPKIN_HOST=${ZIPKIN_HOST}
      - ZIPKIN_PORT=${ZIPKIN_PORT}   
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}       
    command: ["./app"]
    depends_on:
      kafka:
        condition: service_healthy

  # storage
  storage:
    build:
      context: ../../
      dockerfile: ./build/dockerfile/storage/Dockerfile
    container_name: storage
    networks:
      - storage_project
    environment:
      - STORAGE_GRPC_PORT=${STORAGE_GRPC_PORT}
      - STORAGE_DB_PORT=${STORAGE_DB_PORT}
      - STORAGE_POSTGRES_PASSWORD=${STORAGE_POSTGRES_PASSWORD}
      - STORAGE_POSTGRES_DB=${STORAGE_POSTGRES_DB}
      - STORAGE_POSTGRES_HOST=${STORAGE_POSTGRES_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - HOST=${HOST}
      - GRAFANA_LOKI_HOST=${GRAFANA_LOKI_HOST}
      - GRAFANA_LOKI_PORT=${GRAFANA_LOKI_PORT}
      - ZIPKIN_HOST=${ZIPKIN_HOST}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
    command: ["./app"]
    depends_on:
      kafka:
        condition: service_healthy

  # file-process
  file-process:
    build:
      context: ../../
      dockerfile: ./build/dockerfile/file-process/Dockerfile
    container_name: file-process
    networks:
      - storage_project
    environment:
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
      - KAFKA_HOST=${KAFKA_HOST}
      - KAFKA_PORT=${KAFKA_PORT}
      - GRAFANA_LOKI_HOST=${GRAFANA_LOKI_HOST}
      - GRAFANA_LOKI_PORT=${GRAFANA_LOKI_PORT}
      - ZIPKIN_HOST=${ZIPKIN_HOST}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
    command: ["./app"]
    depends_on:
      kafka:
        condition: service_healthy

  # delete service
  delete:
    build:
      context: ../../
      dockerfile: ./build/dockerfile/delete/Dockerfile
    container_name: delete
    networks:
      - storage_project
    environment:
      - MINIO_PORT=${MINIO_PORT}
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_HOST=${MINIO_HOST}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
      - KAFKA_PORT=${KAFKA_PORT}
      - KAFKA_HOST=${KAFKA_HOST}
      - GRAFANA_LOKI_HOST=${GRAFANA_LOKI_HOST}
      - GRAFANA_LOKI_PORT=${GRAFANA_LOKI_PORT}
      - ZIPKIN_HOST=${ZIPKIN_HOST}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
    command: ["./app"]
    depends_on:
      kafka:
        condition: service_healthy

  # Database
  postgres:
    image: postgres:17rc1-alpine3.19
    container_name: postgres
    networks:
      - storage_project
    ports:
      - "${USER_DB_PORT}:5432"
    environment:
      - POSTGRES_USER=${USER_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USER_POSTGRES_PASSWORD}
      - POSTGRES_DB=${USER_POSTGRES_DB}
    volumes:
      - ../../.data/userdb:/var/lib/postgresql/data

  redis:
    image: redis:latest
    container_name: redis
    networks:
      - storage_project
    ports:
      - "${REDIS_PORT}:6379"


  # S3 Compatible Storage
  minio:
    image: bitnami/minio:latest
    container_name: minio
    networks:
      - storage_project
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_WEB_PORT}:9001"
    environment:
      - MINIO_FORCE_NEW_KEYS=yes
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_DEFAULT_BUCKETS=${MINIO_DEFAULT_BUCKETS}
    volumes:
      - ../../.data/minio:/data
    depends_on:
      kafka:
        condition: service_healthy

  # Metrics, Logging and Tracing
  loki:
    image: grafana/loki
    container_name: loki
    networks:
      - storage_project
    ports:
      - "${GRAFANA_LOKI_PORT}:3100"

  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    networks:
      - storage_project
    ports:
      - "${GRAFANA_PORT}:3000"
    depends_on:
      - loki
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ADMIN_USER=samarth
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ../../config/grafana:/etc/grafana/provisioning
      - ../../config/grafana/dashboards:/var/lib/grafana/dashboards

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    networks:
      - storage_project
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    ports:
      - ${PROMETHEUS_PORT}:9090
    restart: unless-stopped
    volumes:
      - ../../config/prometheus:/etc/prometheus

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    networks:
      - storage_project
    ports:
      - "${ZIPKIN_PORT}:9411"


networks:
  storage_project:
    driver: bridge