package grpc_common

import (
	"fmt"
	"net"

	"github.com/openzipkin/zipkin-go"
	zipkingrpc "github.com/openzipkin/zipkin-go/middleware/grpc"
	"github.com/samarthasthan/21BRS1248_Backend/common/env"
	"github.com/samarthasthan/21BRS1248_Backend/common/logger"
	"google.golang.org/grpc"
)

var (
	MAX_FILE_SIZE int
)

func init() {
	MAX_FILE_SIZE = env.GetEnvInt("MAX_FILE_SIZE", 500*1024*1024)
}

type GrpcServer struct {
	log    *logger.Logger
	server *grpc.Server
	tracer *zipkin.Tracer
}

// NewGrpcServer creates a new gRPC server with Zipkin tracing
func NewGrpcServer(log *logger.Logger, tracer *zipkin.Tracer) *GrpcServer {
	// Creating a new gRPC server with Zipkin stats handler
	server := grpc.NewServer(grpc.StatsHandler(zipkingrpc.NewServerHandler(tracer)), grpc.MaxRecvMsgSize(MAX_FILE_SIZE),
		grpc.MaxSendMsgSize(MAX_FILE_SIZE))
	return &GrpcServer{log: log, server: server, tracer: tracer}
}

// Run starts the gRPC server and listens on the specified port
func (g *GrpcServer) Run(port string) {
	// Creating a listener on the specified port
	listener, err := net.Listen("tcp", fmt.Sprintf(":%s", port))
	if err != nil {
		g.log.Fatalf("Failed to listen on port %s: %v", port, err)
	}
	defer listener.Close()

	g.log.Infof("gRPC server listening on port %s", port)
	err = g.server.Serve(listener)
	if err != nil {
		g.log.Fatalf("Failed to serve gRPC server: %v", err)
	}

	defer g.server.GracefulStop()
	g.log.Info("gRPC server stopped")
}

// RegisterService registers a gRPC service to the server
func (g *GrpcServer) RegisterService(registerFunc func(*grpc.Server)) {
	// registerFunc is the service-specific registration function generated by protoc
	registerFunc(g.server)
}
